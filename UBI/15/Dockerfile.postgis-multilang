# vim:set ft=dockerfile:
FROM quay.io/enterprisedb/edb-ubi:8.9-1107.1706791207
ARG SUBSCRIPTION_NAME

# Do not split the description, otherwise we will see a blank space in the labels
LABEL name="PostgreSQL + PostGIS Container Images" \
      vendor="EnterpriseDB" \
      url="https://www.enterprisedb.com/" \
      version="15.5" \
      release="6" \
      summary="PostgreSQL + PostGIS Container images." \
      description="This Docker image contains PostgreSQL, PostGIS and Barman Cloud based on RedHat Universal Base Images (UBI) 8."

COPY root/ /

ARG TARGETARCH
RUN set -xe ; \
	ARCH="${TARGETARCH}" ; \
	base_url="https://download.postgresql.org/pub/repos/yum/reporpms" ; \
	pg_audit_pkg="pgaudit17_15" ; \
	case $ARCH in \
			amd64) \
				yum -y install "${base_url}/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm" ; \
				if [ "15" -gt "15" ]; then pg_audit_pkg="pgaudit_15"; fi ;; \
			arm64) \
				yum -y install "${base_url}/EL-8-aarch64/pgdg-redhat-repo-latest.noarch.rpm" ; \
				if [ "15" -gt "15" ]; then pg_audit_pkg="pgaudit_15"; fi ;; \
			*) \
					exit 1 ;; \
	esac ; \
	yum -y upgrade glibc-common ; \
	yum -y reinstall glibc-common ; \
	rm -fr /etc/rpm/macros.image-language-conf ; \
	yum -y install hostname rsync tar gettext bind-utils nss_wrapper glibc-locale-source glibc-langpack-en glibc-all-langpacks ; \
	yum -y --setopt=tsflags=nodocs install \
		postgresql15-15.5 \
		postgresql15-contrib-15.5 \
		postgresql15-server-15.5 \
		postgresql15-libs-15.5 \
		pg_failover_slots_15 \
		"$pg_audit_pkg" \
	; \
	rm -fr /tmp/* ; \
	yum -y clean all --enablerepo='*'

# Install barman-cloud
RUN set -xe ; \
	yum -y install python3.11-pip python3.11-psycopg2 ; \
	pip3.11 install --upgrade pip ; \
	pip3.11 install -r requirements.txt ; \
	yum -y clean all --enablerepo='*'

# make the sample config easier to munge (and "correct by default")
RUN set -eux; \
	sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/pgsql-15/share/postgresql.conf.sample; \
	grep -F "listen_addresses = '*'" /usr/pgsql-15/share/postgresql.conf.sample

# prepare the environment and make sure postgres user has the correct UID
RUN set -xeu ; \
	localedef -f UTF-8 -i en_US en_US.UTF-8 ; \
	test "$(id postgres)" = "uid=26(postgres) gid=26(postgres) groups=26(postgres)" ; \
	mkdir -p /var/run/postgresql ; \
	chown postgres:postgres /var/run/postgresql ; \
	chmod 0755 /var/run/postgresql

ENV PATH $PATH:/usr/pgsql-15/bin

RUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql

ENV PGDATA /var/lib/postgresql/data/pgdata
# this 777 will be replaced by 700 at runtime (allows semi-arbitrary "--user" values)
RUN mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
VOLUME /var/lib/postgresql/data

RUN mkdir /docker-entrypoint-initdb.d

# Postgis
RUN --mount=type=secret,id=subscription,target=/run/secrets/subscription.sh \
	set -xe ; \
	rm -f /etc/rhsm-host ; \
	SUBSCRIPTION_NAME="${SUBSCRIPTION_NAME}" bash /run/secrets/subscription.sh ; \
	yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm ; \
	ARCH="${TARGETARCH}" ; \
	case $ARCH in \
			amd64) \
				BUILDARCH="x86_64" ;; \
			arm64) \
				BUILDARCH="aarch64" ;; \
			*) \
					exit 1 ;; \
	esac ; \
	yum -y install --enablerepo=ubi-8-codeready-builder,codeready-builder-for-rhel-8-${BUILDARCH}-rpms \
		postgis34_15-3.4.1 \
		pgrouting_15 \
	; \
	yum -y remove epel-release ; \
	subscription-manager remove --all ; \
	subscription-manager unregister ; \
	subscription-manager clean ; \
	yum -y clean all --enablerepo='*' ; \
	ln -sf /run/secrets/rhsm /etc/rhsm-host ; \
	rm /var/log/rhsm/rhsm.log

COPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/10_postgis.sh
COPY ./update-postgis.sh /usr/local/bin

# Remove example certificates in pem and enc format from /usr/share/doc folder
RUN find /usr/share/doc -type f '(' -iname "*.pem" -o -iname "*.enc" ')' -exec rm -rf {} \; || true

# DoD 2.3 - remove setuid/setgid from any binary that not strictly requires it, and before doing that list them on the stdout
RUN find / -not -path "/proc/*" -perm /6000 -type f -exec ls -ld {} \; -exec chmod a-s {} \; || true

USER 26

ENTRYPOINT ["docker-entrypoint.sh"]

# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL
# calls "Fast Shutdown mode" wherein new connections are disallowed and any
# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and
# flush tables to disk, which is the best compromise available to avoid data
# corruption.
#
# Users who know their applications do not keep open long-lived idle connections
# may way to use a value of SIGTERM instead, which corresponds to "Smart
# Shutdown mode" in which any existing sessions are allowed to finish and the
# server stops when all sessions are terminated.
#
# See https://www.postgresql.org/docs/12/server-shutdown.html for more details
# about available PostgreSQL server shutdown signals.
#
# See also https://www.postgresql.org/docs/12/server-start.html for further
# justification of this as the default value, namely that the example (and
# shipped) systemd service files use the "Fast Shutdown mode" for service
# termination.
#
STOPSIGNAL SIGINT
#
# An additional setting that is recommended for all users regardless of this
# value is the runtime "--stop-timeout" (or your orchestrator/runtime's
# equivalent) for controlling how long to wait between sending the defined
# STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).
#
# The default in most runtimes (such as Docker) is 10 seconds, and the
# documentation at https://www.postgresql.org/docs/12/server-start.html notes
# that even 90 seconds may not be long enough in many instances.

EXPOSE 5432
CMD ["postgres"]
